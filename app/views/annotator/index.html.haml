- @title= t('annotator.title')
.annotator-page-container{'data-controller': 'annotator'}
  .annotator-page-subcontainer
    .annotator-page-title
      .text
        = @page_name
      .line
    .annotator-page-decription
      = t('annotator.description')
    = form_tag(@form_url, method: :get, 'data-turbo': true, novalidate: true,'data-controller': 'form-url', 'data-action': 'submit->form-url#submit') do
      .annotator-page-inputs{'data-controller': 'reveal-component'}
        .inputs
          %div
            .annotator-page-text-area{'data-controller': 'sample-text'}
              %textarea{rows: "7" , placeholder: t('annotator.input_hint'), name: "text",  maxlength: "500", 'data-sample-text-target': "input", 'data-annotator-target': 'input'}
                = params[:text]
              = insert_sample_text_button(t('annotator.insert_sample_text'))
          .annotator-page-options
            .section-text
              = t('annotator.options')
            .prefrences
              .chips
                = render(ChipsComponent.new(name: 'whole_word_only', label: t('annotator.whole_word_only'), checked: @init_whole_word_only.nil? || params[:whole_word_only]))
                = render(ChipsComponent.new(name: 'longest_only', label: t('annotator.match_longest_only'), checked: params[:longest_only]))
                = render(ChipsComponent.new(name: 'expand_mappings', label: t('annotator.include_mappings'), checked: params[:expand_mappings]))
                = render(ChipsComponent.new(name: 'exclude_numbers', label: t('annotator.exclude_numbers'), checked: params[:exclude_numbers]))
                = render(ChipsComponent.new(name: 'exclude_synonyms', label: t('annotator.exclude_synonyms'), checked: params[:exclude_synonyms]))
              
            .select-ontologies
              = ontologies_selector(id:'annotator_page_ontologies', label: t('annotator.select_ontologies') ,name: 'ontologies[]', selected: params[:ontologies]&.split(','))
            = show_advanced_options_button(text: t('show_advanced_options'), init: @advanced_options_open)
            = hide_advanced_options_button(text: t('hide_advanced_options'), init: @advanced_options_open)
        .more-advanced-options{'data-reveal-component-target': 'item', class: "#{@advanced_options_open ? '' : 'd-none'}"}
          .filters_line
            = render Input::SelectComponent.new(label: t('annotator.select_umls_sementic_types'), id: 'umls_semantic_types', name: 'semantic_types[]', value: @semantic_types_for_select, multiple: true, selected: params[:semantic_types]&.split(','))
            = render Input::SelectComponent.new(label: t('annotator.select_umls_sementic_groups'), id: 'umls_semantic_groups', name: 'semantic_groups[]', value: @semantic_groups_for_select, multiple: true, selected: params[:semantic_groups]&.split(','))
            = render Input::SelectComponent.new(label: t('annotator.include_ancestors'), id: 'ancestors_level', name: 'class_hierarchy_max_level', value: @ancestors_levels, selected: params[:class_hierarchy_max_level])
          .filters_line
            - include_score_helper = 'Score annotations following previous NCBO 2009 measure (old) or Score annotations following C-Value measure (cvalue) or Score annotations following C-Value measure with hierarchy expansion (cvalueh).'

            = render Input::SelectComponent.new(label: t('annotator.include_score'), id: 'include_score', name: 'score', value: @include_score, tooltip: include_score_helper, selected: params[:score])
            = render Input::NumberComponent.new(label: t('annotator.score_threshold'), name: "score_threshold", value: params[:score_threshold] || 0, tooltip: 'Specify minimum score value for annotations.')
            = render Input::NumberComponent.new(label: t('annotator.confidence_threshold'), name: 'confidence_threshold', value: params[:confidence_threshold] || 0, tooltip: 'Specify the minimum position in the score distribution (between 1 and 100).')
          .chips
            = render(ChipsComponent.new(name: 'fast_context', label: t('annotator.fastcontext'), checked: params[:fast_context]))
            = render(ChipsComponent.new(name: 'lemmatize', label: t('annotator.lemmatize'), checked: params[:lemmatize]))
        .annotator-page-button
          = render Buttons::RegularButtonComponent.new(id:'annotator', value: t('annotator.get_annotation'), variant: "primary", type: 'submit')
    - if @results && @results.empty?
      = empty_state(t('no_result_was_found'))
    - unless @results.nil? || @results.empty?
      .annotator-page-results
        .cont
          .title
            Annotations
          .details
            = "#{t('annotator.total_results')} #{@results.length} (direct: #{@direct_results} / parents: #{@parents_results})"
        .annotator-table-container
          = render TableComponent.new(id: 'annotator-table', borderless: true, layout_fixed: false, outline: true, sort_column: '0', no_init_sort: true) do |t|
            - t.header do |h|
              - @results_table_header.each do |header|
                - h.th do
                  = header
            - @results.each do |result|
              - t.row do |r|
                - r.td do
                  .class
                    = link_to result[:class][:text], result[:class][:link]
                - r.td do
                  = link_to result[:ontology][:text], result[:ontology][:link]
                - r.td do
                  - result[:context].each do |context|
                    - if !context[:child]
                      .annotation-context{'data-from': context[:from], 'data-to': context[:to], 'data-annotator-target': 'context'}
                    - else
                      .annotation-parent
                        .text
                          Parent of: 
                        = link_to context[:child][:text], context[:child][:link]
                        .gray
                          |
                        .text
                          Level:
                        .level
                          = context[:level]
                - if params[:fast_context]
                  - r.td do
                    = result[:negation]
                  - r.td do
                    = result[:experiencer]
                  - r.td do
                    = result[:temporality]
                  - r.td do
                    = result[:certainty]
                - if params[:score] && !params[:score].eql?('none')
                  - r.td do
                    = result[:score] 
        .annotator-bottom-actions
          .json-button
            = render Buttons::RegularButtonComponent.new(id:'annotator_json', value: "JSON", variant: "secondary", href: @json_link, size: "slim", target: '_blank', state: "regular") do |btn|
              - btn.icon_left do
                = inline_svg_tag "json.svg"
          .rdf-button
            = render Buttons::RegularButtonComponent.new(id:'annotator_rdf', value: "RDF", variant: "secondary", href: @rdf_link, size: "slim", target: '_blank', state: "regular") do |btn|
              - btn.icon_left do
                = inline_svg_tag "summary/sparql.svg"
          .cite-us-button
            = render Buttons::RegularButtonComponent.new(id:'annotator_cite_us', value: t('recommender.cite'), variant: "secondary", href: $CITE_ANNOTATOR, size: "slim", target: '_blank', state: "regular") do |btn|
              - btn.icon_left do
                = inline_svg_tag "icons/cite.svg"
          .annotator-doc
            = render Buttons::RegularButtonComponent.new(id:'annotator_api_doc', value: t('annotator.api_documentation'), variant: "secondary", href: $ANNOTATOR_API_DOC, size: "slim", target: '_blank', state: "regular") do |btn|
              - btn.icon_left do
                = inline_svg_tag "summary/documentation.svg"