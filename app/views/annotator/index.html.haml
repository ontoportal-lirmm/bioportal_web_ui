- @title= t('annotator.title')
.annotator-page-container{'data-controller': 'annotator'}
  .annotator-page-subcontainer
    .annotator-page-title
      .text
        Annotator
      .line
    .annotator-page-decription
      Get annotations for text with ontology classes
    = form_tag('/annotator', method: :get, 'data-turbo': true, novalidate: true) do
      .annotator-page-inputs{'data-controller': 'reveal-component'}
        .inputs
          %div
            .annotator-page-text-area{'data-controller': 'sample-text'}
              %textarea{rows: "6" , placeholder: "Enter or past a text to be annotated ...", name: "text",  maxlength: "500", 'data-sample-text-target': "input", 'data-annotator-target': 'input'}
                = params[:text]
              = insert_sample_text_button(t('recommender.insert_sample_text'))
          .annotator-page-options
            .section-text
              Options
            .select-ontologies
              - get_ontologies_data
              = render Input::SelectComponent.new(label: t('recommender.select_ontologies'), id: 'ontologies', name: 'ontologies_list[]', value: @onts_for_select, multiple: "multiple", selected: params[:ontologies_list])
            .prefrences
              .preftitle Prefrences
              .chips
                = render(ChipsComponent.new(name: 'whole_word_only', label: 'Whole word only', checked: params[:whole_word_only] || true))
                = render(ChipsComponent.new(name: 'longest_only', label: 'Match longest only', checked: params[:longest_only]))
                = render(ChipsComponent.new(name: 'also_search_obsolete', label: 'Recognize partial words'))
                = render(ChipsComponent.new(name: 'expand_mappings', label: 'Include mappings', checked: params[:expand_mappings]))
                = render(ChipsComponent.new(name: 'exclude_numbers', label: 'Exclude numbers', checked: params[:exclude_numbers]))
                = render(ChipsComponent.new(name: 'exclude_synonyms', label: 'Exclude synonyms', checked: params[:exclude_synonyms]))
              = show_advanced_options_button(text: t('show_advanced_options'), init: @advanced_options_open)
              = hide_advanced_options_button(text: t('hide_advanced_options'), init: @advanced_options_open)
                
        .more-advanced-options.d-none{'data-reveal-component-target': 'item'}
          .filters_line
            = render Input::SelectComponent.new(label: 'Select UMLS semantic types', id: 'umls_semantic_types', name: 'semantic_types_list[]', value: @semantic_types_for_select, multiple: true, selected: params[:semantic_types_list])
            = render Input::SelectComponent.new(label: 'Select UMLS semantic groupes', id: 'umls_semantic_groups', name: 'umls_semantic_groups', value: @semantic_groups_for_select, multiple: true)
            = render Input::SelectComponent.new(label: 'Include ancestors up to level', id: 'ancestors_level', name: 'class_hierarchy_max_level', value: @ancestors_levels, selected: params[:class_hierarchy_max_level])
          .filters_line
            - include_score_helper = 'Score annotations following previous NCBO 2009 measure (old) or Score annotations following C-Value measure (cvalue) or Score annotations following C-Value measure with hierarchy expansion (cvalueh).'
            = render Input::SelectComponent.new(label: 'Include score', id: 'include_score', name: 'score', value: @include_score, helper_text: include_score_helper, selected: params[:score])
            = render Input::NumberComponent.new(label: 'Filter by score threshold', name: "score_threshold", value: 0, helper_text: 'Specify minimum score value for annotations.')
            = render Input::NumberComponent.new(label: 'Filter confidence threshold', name: 'confidence_threshold', value: 0, helper_text: 'Specify the minimum position in the score distribution (between 1 and 100).')
          .chips
            = render(ChipsComponent.new(name: 'FastContext', label: 'FastContext'))
            = render(ChipsComponent.new(name: 'Lemmatize', label: 'Lemmatize'))
        .annotator-page-button
          = render Buttons::RegularButtonComponent.new(id:'annotator', value: 'Get annotations', variant: "primary", type: 'submit')
    - if @results && @results.empty?
      = empty_state(t('no_result_was_found'))
    - unless @results.nil? || @results.empty?
      .annotator-page-results
        .cont
          .title
            Annotations
          .details
            = "Total results #{@results.length} (direct: #{@direct_results} / parents: #{@parents_results})"
        .annotator-table-container
          = render TableComponent.new(id: 'annotator-table', borderless: true, layout_fixed: true, outline: true, sort: true, no_init_sort: true, auto_layout: true) do |t|
            - t.header do |h|
              - @results_table_header.each do |header|
                - h.th do
                  = header
            - @results.each do |result|
              - t.row do |r|
                - r.td do
                  .class
                    %a{href: result[:class][:link]}
                      = result[:class][:text]
                - r.td do
                  %a{href: result[:ontology][:link]}
                    = result[:ontology][:text]
                - r.td do
                  - result[:context].each do |context|
                    - if !context[:child]
                      .annotation-context{'data-from': context[:from], 'data-to': context[:to]}
                    - else
                      .annotation-parent
                        .text
                          Parent of: 
                        %a{href: context[:child][:link]}
                          = context[:child][:text]
                        .gray
                          |
                        .text
                          Level:
                        .level
                          = context[:level]
                - if !params[:score].nil? && !params[:score].eql?('none')
                  - r.td do
                    = result[:score]                