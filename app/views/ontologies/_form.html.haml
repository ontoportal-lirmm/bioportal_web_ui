- unless @errors.nil?
  .enable-lists{:style => "color:red;"}
    %strong Errors On Form
    %ul
      - if @errors[:error].instance_of? OpenStruct
        - errors = @errors[:error].to_h
        - errors.delete :links
        - errors.delete :context
        - errors.to_h.each do |errors_field, error|
          - next if error.nil?
          <style>#ontology_#{errors_field} { border: thin solid red; }</style>
          %li
            - if error.instance_of? OpenStruct
              - error_hash = error.to_h
              - error_hash.delete :links
              - error_hash.delete :context
              - error_hash.each do |error_type, e|
                = "#{error_type} : #{e}"
            - else
              = errors_field
      - else
        = @errors.to_json

.upload-ontology-container
  .upload-ontology-card
    .upload-ontology-center
      .Upload-ontology-title
        %div 
          = @is_update_ontology ? "Upload new update" : "Upload ontology"
        %hr

    .upload-ontology-progress
      .details.progress-item
        .outlined-circle.outlined-active-circle
          %img{src: asset_path("white-check.svg")}
        .active
          Details
      %hr.line
      .General-metadata.progress-item
        .outlined-circle
          %img{src: asset_path("white-check.svg")}
        %div General metadata
      %hr.line
      .Dates-and-contacts.progress-item
        .outlined-circle
          %img{src: asset_path("white-check.svg")}
        %div Dates contacts


    
    .upload-ontology-details-step{"data-form": "1"}
      .upload-ontology-input-field-container
        = render Input::TextInputComponent.new(label: "Name", name: "ontology[name]", value: @ontology.name)
      .upload-ontology-input-field-container
        = render Input::TextInputComponent.new(label: "Acronym", name: "ontology[acronym]", value: @ontology.acronym, disabled: @is_update_ontology)
       
      .upload-ontology-input-field-container#handlechangetest
        = render Input::SelectComponent.new(label: "Visibility", name: "ontology[viewingRestriction]", value: ["public","private"], selected: @ontology.viewingRestriction)
      .upload-ontology-input-field-container#visibility-group.hide
        = render Input::SelectComponent.new(label: "Add or remove accounts that are allowed to view classes in this ontology using the account name", name: "ontology[acl]", value: @user_select_list, multiple: true, selected: @ontology.acl)

      .upload-ontology-field-container
        = render Input::SelectComponent.new(label: "Administrator", name: "ontology[administeredBy]", value: @user_select_list, selected: @ontology.administeredBy || session[:user].id, multiple: true, helper_text: "You should select one admin at least")
      .upload-ontology-field-container
        %div.mb-2 Categories
        %div.upload-ontology-chips-container
          - @categories.each do |category|
            = render ChipsComponent.new(name: "ontology[hasDomain][]", id: category[:acronym] , value: category[:acronym], checked: @ontology.hasDomain&.any?{|x| x.eql?(category[:id])})
      .upload-ontology-field-container
        %div.mb-2 Groups
        %div.upload-ontology-chips-container
          - @groups.each do |group|
            = render ChipsComponent.new(name: "ontology[group][]", id: group[:acronym] , value: group[:acronym], checked: @ontology.group&.any?{|x| x.eql?(group[:id])})

      .upload-ontology-input-field-container.mt-2
        %span.d-flex
          = render SwitchInputComponent.new(id: 'ontology_isView', name: 'ontology[isView]', label: 'Is a view of another ontology?', checked: @ontology.view?)
        %div#ontology_viewOf{style: "display: none"}
          = render partial: "shared/ontology_picker_single", locals: {placeholder: "", field_name: "viewOf", selected: @ontology.viewOf}
    .upload-general_metadata-step.hide{"data-form": "2"}
      .upload-ontology-desc
        %div
          To understand the ontologies metadata:
          %a{:href => "#seethewiki"}
            see the Wiki
            %svg{:fill => "none", :height => "8", :viewbox => "0 0 8 8", :width => "8", :xmlns => "http://www.w3.org/2000/svg"}
              %path{:d => "M5.77776 8H1.33333C0.977156 8 0.642334 7.8613 0.390512 7.60946C0.138689 7.35762 0 7.02278 0 6.66666V2.22222C0 1.86607 0.138704 1.53124 0.390527 1.27942C0.64235 1.0276 0.977172 0.888894 1.33334 0.888894H3.11111C3.35659 0.888894 3.55556 1.08787 3.55556 1.33334C3.55556 1.57881 3.35659 1.77779 3.11111 1.77779H1.33333C1.2146 1.77779 1.10301 1.82402 1.01907 1.90795C0.935144 1.99188 0.888894 2.1035 0.888894 2.22222V6.66666C0.888894 6.78538 0.935129 6.89698 1.01907 6.98094C1.10301 7.06486 1.2146 7.11111 1.33333 7.11111H5.77775C5.89647 7.11111 6.00807 7.06487 6.09202 6.98091C6.17595 6.89698 6.22218 6.78537 6.22218 6.66664V4.88889C6.22218 4.64341 6.42117 4.44445 6.66664 4.44445C6.91212 4.44445 7.11111 4.64343 7.11111 4.88889V6.66666C7.11111 7.02281 6.9724 7.35762 6.72056 7.60947C6.46872 7.8613 6.13389 8 5.77776 8ZM3.11111 5.33332C2.99736 5.33332 2.88362 5.28994 2.79685 5.20315C2.62329 5.02959 2.62329 4.74816 2.79685 4.5746L6.48254 0.888894H4.88889C4.64341 0.888894 4.44445 0.68992 4.44445 0.444447C4.44445 0.198974 4.64341 0 4.88889 0H7.55555C7.61702 0 7.67556 0.0124825 7.72882 0.0350409C7.77851 0.0560624 7.82518 0.0865233 7.86602 0.126439L7.86605 0.12647C7.86634 0.126765 7.86664 0.127045 7.86692 0.12734C7.86699 0.127417 7.8671 0.127511 7.86718 0.127588C7.8674 0.127805 7.86765 0.128038 7.86786 0.128271C7.86802 0.128427 7.86816 0.128566 7.86831 0.128721C7.86848 0.128892 7.86867 0.129079 7.86881 0.129218C7.86912 0.129529 7.86946 0.129855 7.86977 0.130181C7.87008 0.130491 7.87042 0.130833 7.87074 0.131143C7.87091 0.131299 7.87109 0.131501 7.87122 0.13164C7.87139 0.131796 7.87151 0.131935 7.87167 0.132091C7.87191 0.132323 7.87213 0.132541 7.87235 0.132789C7.87243 0.132851 7.87254 0.13296 7.8726 0.133038C7.87289 0.133333 7.87319 0.133628 7.87347 0.133923L7.8735 0.133954C7.9134 0.174817 7.94388 0.221486 7.96488 0.271167C7.98744 0.32442 7.99994 0.382951 7.99994 0.444431V3.1111C7.99994 3.35657 7.80095 3.55555 7.55548 3.55555C7.31 3.55555 7.11104 3.35657 7.11104 3.1111V1.51744L3.4253 5.20317C3.33859 5.28995 3.22485 5.33332 3.11111 5.33332Z", :fill => "#31B404"}
      .upload-ontology-input-field-container
        = render Input::UrlComponent.new(label: "URI", name: "submission[URI]", value: @submission.URI)
      .upload-ontology-input-field-container
        = render Input::TextAreaComponent.new(label: "Description", name: "submission[description]", value: @submission.description)
      - if @is_update_ontology
        .upload-ontology-input-field-container
          = generate_list_text_input("notes", "submission[notes]", Array(@submission.notes), label: "Change notes")
          -#= render Input::TextAreaComponent.new(label: "Changes comment", name: "submission[notes]", value: @submission.notes.to_s)
      .upload-ontology-field-container
        = render Input::SelectComponent.new(label: "Format", name: "submission[hasOntologyLanguage]", value: ["OBO", "OWL", "SKOS", "UMLS"], selected: @submission.hasOntologyLanguage)
        .upload-ontology-desc.hide
          %div
            SKOS vocabularies submitted to BioPortal must contain a minimum of one concept scheme and top concept assertion. Please
            refer to the NCBO wiki for a more
            %a{:href => "#seethewiki"}
              detailed explanation
              %svg{:fill => "none", :height => "8", :viewbox => "0 0 8 8", :width => "8", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M5.77776 8H1.33333C0.977156 8 0.642334 7.8613 0.390512 7.60946C0.138689 7.35762 0 7.02278 0 6.66666V2.22222C0 1.86607 0.138704 1.53124 0.390527 1.27942C0.64235 1.0276 0.977172 0.888894 1.33334 0.888894H3.11111C3.35659 0.888894 3.55556 1.08787 3.55556 1.33334C3.55556 1.57881 3.35659 1.77779 3.11111 1.77779H1.33333C1.2146 1.77779 1.10301 1.82402 1.01907 1.90795C0.935144 1.99188 0.888894 2.1035 0.888894 2.22222V6.66666C0.888894 6.78538 0.935129 6.89698 1.01907 6.98094C1.10301 7.06486 1.2146 7.11111 1.33333 7.11111H5.77775C5.89647 7.11111 6.00807 7.06487 6.09202 6.98091C6.17595 6.89698 6.22218 6.78537 6.22218 6.66664V4.88889C6.22218 4.64341 6.42117 4.44445 6.66664 4.44445C6.91212 4.44445 7.11111 4.64343 7.11111 4.88889V6.66666C7.11111 7.02281 6.9724 7.35762 6.72056 7.60947C6.46872 7.8613 6.13389 8 5.77776 8ZM3.11111 5.33332C2.99736 5.33332 2.88362 5.28994 2.79685 5.20315C2.62329 5.02959 2.62329 4.74816 2.79685 4.5746L6.48254 0.888894H4.88889C4.64341 0.888894 4.44445 0.68992 4.44445 0.444447C4.44445 0.198974 4.64341 0 4.88889 0H7.55555C7.61702 0 7.67556 0.0124825 7.72882 0.0350409C7.77851 0.0560624 7.82518 0.0865233 7.86602 0.126439L7.86605 0.12647C7.86634 0.126765 7.86664 0.127045 7.86692 0.12734C7.86699 0.127417 7.8671 0.127511 7.86718 0.127588C7.8674 0.127805 7.86765 0.128038 7.86786 0.128271C7.86802 0.128427 7.86816 0.128566 7.86831 0.128721C7.86848 0.128892 7.86867 0.129079 7.86881 0.129218C7.86912 0.129529 7.86946 0.129855 7.86977 0.130181C7.87008 0.130491 7.87042 0.130833 7.87074 0.131143C7.87091 0.131299 7.87109 0.131501 7.87122 0.13164C7.87139 0.131796 7.87151 0.131935 7.87167 0.132091C7.87191 0.132323 7.87213 0.132541 7.87235 0.132789C7.87243 0.132851 7.87254 0.13296 7.8726 0.133038C7.87289 0.133333 7.87319 0.133628 7.87347 0.133923L7.8735 0.133954C7.9134 0.174817 7.94388 0.221486 7.96488 0.271167C7.98744 0.32442 7.99994 0.382951 7.99994 0.444431V3.1111C7.99994 3.35657 7.80095 3.55555 7.55548 3.55555C7.31 3.55555 7.11104 3.35657 7.11104 3.1111V1.51744L3.4253 5.20317C3.33859 5.28995 3.22485 5.33332 3.11111 5.33332Z", :fill => "#31B404"}
            with examples.
      .upload-ontology-field-container.mt-3
        = render Input::SelectComponent.new(label: 'Status', name: "submission[status]", value: ["alpha", "beta", "production", "retired"], selected: @submission.status)
      .upload-ontology-field-container
        .mt-3.mb-2 Location
        = render partial: 'submission_location_form'


    .upload-ontology-dates-and-contacts-step.hide{"data-form": "3"}
      .upload-ontology-input-field-container
        - if @is_update_ontology
          = generate_attribute_input("modificationDate")
          -#= render Input::DateComponent.new(label: "Modification date (dd/mm/yy)", name: "submission[modificationDate]", value: @submission.modificationDate || Date.today)
        - else
          = render Input::DateComponent.new(label: "Date of original creation (dd/mm/yy)", name: "submission[released]", value: @submission.released || Date.today)
      .upload-ontology-contact
        = render NestedFormInputsComponent.new(object_name: "Contact") do |c|
          - c.header do
            - content_tag(:div, 'Contact name', class: 'w-50') + content_tag(:div, 'Contact email', class: 'w-50')
          - c.template do
            = content_tag(:div, class:"d-flex my-1" ) do
              .w-50.mr-2
                = render Input::TextInputComponent.new(label: "", name: "submission[contact][NEW_RECORD][name]")
              .w-50
                = render Input::TextInputComponent.new(label: "", name: "submission[contact][NEW_RECORD][email]")
          - Array(@submission.contact).each_with_index do |contact, i|
            - c.row do
              = content_tag(:div, class: "d-flex my-1") do
                .w-50.mr-2
                  = render Input::TextInputComponent.new(label: "", name: "submission[contact][#{i}][name]", value: contact["name"])
                .w-50
                  = render Input::TextInputComponent.new(label: "", name: "submission[contact][#{i}][email]", value: contact["email"])
            



    .upload-ontology-actions
      #backBtn.upload-ontology-back-button.hide{:onclick => "navigateForm('back')"}
        %svg{:fill => "none", :height => "9", :viewbox => "0 0 6 9", :width => "6", :xmlns => "http://www.w3.org/2000/svg"}
          %path{:d => "M5.10216e-05 4.40153C5.10216e-05 4.55929 0.0602865 4.71702 0.180504 4.8373L3.9654 8.62216C4.20617 8.86293 4.59653 8.86293 4.8372 8.62216C5.07787 8.38149 5.07787 7.99121 4.8372 7.75042L1.48811 4.40153L4.83708 1.05262C5.07775 0.811852 5.07775 0.421607 4.83708 0.180958C4.59641 -0.059926 4.20605 -0.059926 3.96528 0.180958L0.180387 3.96576C0.0601501 4.08609 5.10216e-05 4.24383 5.10216e-05 4.40153Z", :fill => "#31B404"}
        %div Back
      #nextBtn.upload-ontology-next-button{:onclick => "navigateForm('next')"}
        %div Next
        %img{:alt => "", :src => asset_path("arrow-right.svg")}/
      #finishBtn.upload-ontology-finish-button.upload-ontology-next-button.hide
        = submit_tag "Finish"
        %img{:alt => "", :src => asset_path("white-check.svg")}/


:javascript
  const NUMBER_OF_FORMS = 3;
  const BTN_IDS = ["backBtn", "nextBtn", "finishBtn"];
  let currentForm = 1;
  
  const navigateForm = (direction) => {
      if (currentForm && currentForm >= 1 && currentForm <= 3) {
          if (direction === "next") {
              currentForm += 1;
          }  
          
          if (direction === "back") {
              currentForm -= 1;
          }

          showForm(currentForm);
      }
  };

  const showForm = (targetForm) => {
          
      for (let index = 1; index <= NUMBER_OF_FORMS; index++) {
          
          const targetFormDOM = document.querySelector(`[data-form="${index}"]`);
          
          const isCurrentForm = targetForm === index;

          targetFormDOM.classList.toggle("hide", !isCurrentForm);

          if (isCurrentForm) {
              updateProgressBar(targetForm);
              updateButtons(targetForm);
          }
          
      }

  }

  const updateButtons = (targetForm) => {
      switch (targetForm) {
          case 1: 
              showBtn([BTN_IDS[1]]);
              break;

          case NUMBER_OF_FORMS:
              showBtn([BTN_IDS[0], BTN_IDS[2]]);
              break;

          default: 
              showBtn([BTN_IDS[0], BTN_IDS[1]]);
              break;
      }

  }

  const showBtn = (btnIds = []) => {
      
      BTN_IDS.forEach((btn) => {
          
          const targetBtnDOM = document.querySelector("#" + btn);
          
          const shouldShowBtn = btnIds.includes(btn);
          targetBtnDOM.classList.toggle("hide", !shouldShowBtn);

      });
  }

  const updateProgressBar = (targetForm) => {
      const progressItemsDOM = document.querySelectorAll(".progress-item");
      const line = document.querySelectorAll(".line");

      progressItemsDOM.forEach((item, index) => {
          const isPassedSection = index + 1 < targetForm;
          const isCurrentSection = index + 1 === targetForm;

          item.children[0].classList.toggle("outlined-checked-circle", isPassedSection);
          item.children[0].classList.toggle("outlined-active-circle", isCurrentSection);
          
          
          item.children[1].classList.toggle("active", isCurrentSection || isPassedSection);
          
          
          line[index]?.classList.toggle("active", isPassedSection);
      });
  };

  const parentDiv = document.getElementById('handlechangetest');
  const visibilityGroupDiv = document.getElementById('visibility-group');
    parentDiv.addEventListener('change', () => {
    // Get the selected value from the select element
    const selectElement = document.getElementById('select_visibility');
    const selectedValue = selectElement.value;


    // Check if the selected value is "private"
    if (selectedValue === 'private') {
      // If it's "private", show the visibility-group div
      visibilityGroupDiv.style.display = 'block';
    } else {
      // If it's not "private", hide the visibility-group div
      visibilityGroupDiv.style.display = 'none';
    }
  });
  jQuery("#ontology_isView").live("click", function(){
      if (jQuery("#ontology_isView").is(":checked")) {
        jQuery("#ontology_viewOf").removeAttr('disabled');
        jQuery("#ontology_viewOf").removeAttr('disabled').show();
      } else {
        jQuery("#ontology_viewOf").attr('disabled', true).hide();
      }
  });
