.ontology-notes-container
  .left-column 
    .note-inputs-container
      = render TabsContainerComponent.new do |c|
        - c.item(title: 'Comment', selected: true)
        - c.item_content do
          .note-inputs
            = render Input::TextInputComponent.new(name: "name", placeholder: "Subject")
            = render Input::TextInputComponent.new(name: "name", placeholder: "Related object (class, property ...)")
            = render Input::TextAreaComponent.new(name: "name", placeholder: "Leave a comment ...", rows: 6)
            = render Buttons::RegularButtonComponent.new(id:'add-comment', value: "Add comment", variant: "secondary", size: "slim")

        - c.item(title: 'Proposale')
        - c.item_content do
          .note-inputs
            = render Input::SelectComponent.new(id: "proposal-type", name: 'proposal-type', value: ['New class', 'New relationship', 'Change property value'], selected: 'New class')
            = render Input::TextInputComponent.new(name: "name", placeholder: "Class id")
            = render Input::TextInputComponent.new(name: "name", placeholder: "Label")
            = render Input::TextInputComponent.new(name: "name", placeholder: "Synonyms")
            = render Input::TextInputComponent.new(name: "name", placeholder: "Definition")
            = render Input::TextInputComponent.new(name: "name", placeholder: "Parent")
            = render Input::TextAreaComponent.new(name: "name", placeholder: "Comment", rows: 6)
            = render Buttons::RegularButtonComponent.new(id:'add-comment', value: "Add proposal", variant: "secondary", size: "slim")
    .reviews
      = render DropdownContainerComponent.new(id: 'id' , title: reviews_dropdown_title) do
        content of review

  .right-column
    - if @notes.nil? || @notes.empty?
      empty state here
    - else
      - @notes.each_with_index do |note, index|
        -# todo we should hide the note if the user is not an admin and note.archived is nil
        .note 
          .note-left-column
            .note-header
              .note-creator
                = get_name(note.creator)
              .note-icon
                = inline_svg_tag 'icons/comment.svg' # todo: check note.proposal if nil or not to display the suitable icon and we need to add a tooltip also
              - # todo: need to calculate based on the creation date, note.created
              .note-date
                2 Months ago
            .note-content
              .note-object
                = note.subject
              .note-body
                = note.body
            .social-actions{'data-controller': 'community'}
              .vote-button{'data-community-target': 'vote'}
                .up-button{'data-action': 'click->community#up'}
                  = inline_svg_tag 'icons/arrow.svg'
                .count
                  Vote
                .down-button{'data-action': 'click->community#down'}
                  = inline_svg_tag 'icons/arrow.svg'
              .replies
                = inline_svg_tag 'icons/reply.svg'
                Replies
                
          .note-right-column
            - note.relatedClass.each do |cls|
              = get_link_for_cls_ajax(cls, note.relatedOntology.first)


            
        - unless index == @notes.length - 1
          .notes-devider