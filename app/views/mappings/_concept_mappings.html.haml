-# NOTES on control over mapping deletion:
-# deleteMappings() is a callback that is called by "#delete_mappings_button" created below.
-# The appearance of that button is controlled by updateMappingDeletePermissions(), which
-# relies on @delete_mapping_permission in /app/views/mappings/_mapping_table.html.haml; which,
-# in turn, is set by /app/controllers/application_controller.check_delete_mapping_permission()

= turbo_frame_tag 'mapping_count' do
  = "#{@mappings.size}"

= turbo_frame_tag @type.eql?('modal') ? 'application_modal_content' : 'concept_mappings' do
  %div{:style => "padding: 1%; width: 98%"}
    - if session[:user].nil?
      = link_to "Create New Mapping", "/login?redirect=/ontologies/#{@ontology.acronym}/?p=classes&t=mappings&conceptid=#{escape(@concept.id)}", :method => :get, :class => "btn btn-default mb-3"
    - else
      = link_to_modal("Create New Mapping",
                new_mapping_path(ontology_from: "#{@ontology.id}", conceptid_from: "#{@concept.id}"),
                id: "new_mapping_btn",
                role: "button",
                class: "btn btn-default mb-3",
                data: { show_modal_title_value: "Create a new mapping for #{@concept.prefLabel}" },
                )

    #mapping_details
      = render :partial => '/mappings/mapping_table'