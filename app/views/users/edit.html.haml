
:javascript
  /* refer to input fields by name for rules */
  /* refer to input fields by id for equalTo */
  jQuery(document).ready(function() {
    jQuery('#user_info').on('submit', function (event) {
        event.preventDefault()
        let admin_checkbox = jQuery('input[id=user_admin]')
        if(admin_checkbox.attr('checked') && !admin_checkbox.hasClass('admin')){
          alertify.confirm(t('users.edit.user_to_admin'), (e) => {
            if(e){
              this.submit()
            }else {
              jQuery('input[type="submit"]').prop('disabled',false)
            }
          })
        } else if (!admin_checkbox.attr('checked') && admin_checkbox.hasClass('admin')){
          alertify.confirm(t('users.edit.admin_privileges'),  (e) => {
            if(e){
              this.submit()
            }else {
              jQuery('input[type="submit"]').prop('disabled',false)
            }
          })
        }else {
          this.submit()
        }
      })
  });

  (function (jQuery) {
    // custom css expression for a case-insensitive contains()
    jQuery.expr[':'].Contains = function(a,i,m){
        return (a.textContent || a.innerText || "").toUpperCase().indexOf(m[3].toUpperCase())>=0;
    };

    function listFilter(header, list) { // header is any element, list is an unordered list
      // create and add the filter form to the header
      var form = jQuery("<form>").attr({"class":"filterform","action":"#"}),
          input = jQuery("<input>").attr({"class":"filterinput","type":"text"});
      jQuery(form).append(input).appendTo(header);

      jQuery(input)
        .change( function () {
          var filter = jQuery(this).val();
          if(filter) {
            // this finds all links in a list that contain the input,
            // and hide the ones not containing the input while showing the ones that do
            jQuery(list).find("a:not(:Contains(" + filter + "))").closest("li").hide();
            jQuery(list).find("a:Contains(" + filter + ")").closest("li").show();
          } else {
            jQuery(list).find("li").show();
          }
          return false;
        })
      .keyup( function () {
          // fire the above change event after every letter
          jQuery(this).change();
      });
    }
  })
= form_for(:user, :url => user_path(@user.username), :html => { :id => "user_info", :method => :put }) do |f|
  - unless @errors.nil?
    .enable-lists{:style => "color: red; padding: 1em;"}
      = t('users.edit.errors_creating_account')
      %ul
        - for error in @errors
          %li= error
  .d-flex.justify-content-center
    .register-form
      .d-flex.justify-content-between
        %a{:href => "javascript:javascript:history.go(-1)"}
          %img.lost-password-arrowback{:src => "#{asset_path("arrow-back.svg")}"}
        .register-title-container
          %h2.register-title
            = t('users.edit.edit_information')
          %hr#register-title-line/
        %div
      - if @user.validate_password.nil?
        .register-double-input
          .register-first-input
            %p.register-input-title
              = t('users.edit.first_name')
              %font{:color => "red"} *
            = text_field :user, :firstName, value: @user.firstName, class: "register-input-short"
          %div
            %p.register-input-title
              = t('users.edit.last_name')
              %font{:color => "red"} *
            = text_field :user, :lastName, value: @user.lastName, class: "register-input-short"
        %div.hidden
          %p.register-input-title
            = t('users.edit.username')
            %font{:color => "red"} *
          = text_field :user, :username, value: @user.username, class: "register-input-long"
        %p.register-input-title
          = t('users.edit.email')
          %font{:color => "red"} *
        = text_field :user, :email, value: @user.email, class: "register-input-long"
        %p.register-input-title
          = t('users.edit.orcid_id')
          %font.register-optional (optional)
        %img.register-input-icon{:src => "#{asset_path("orcid.svg")}"}/
        = text_field :user, :orcidId, value: @user.orcidId, class: "register-input-long register-input-with-icon"
        %p.register-input-title
          = t('users.edit.github_id')
          %font.register-optional (optional)
        %img.register-input-icon{:src => "#{asset_path("github-icon.svg")}"}/
        = text_field :user, :githubId, value: @user.githubId, class: "register-input-long register-input-with-icon no-margin"
        - if session[:user].admin?
          .d-flex{:style => "margin-top: 10px;"}
            = check_box :user, :admin?, { class: (@user.admin? ? 'admin' : '') , id: "user_register_mail_list" }
            %p#register-check-text Grant admin privileges
      - else
        = hidden_field :user, :username, value: @user.username
        = hidden_field :user, :firstName, value: @user.firstName
        = hidden_field :user, :lastName, value: @user.lastName
        = hidden_field :user, :email, value: @user.email
        %p.register-input-title
          = t('users.edit.new_password')
          %font{:color => "red"} *
        = password_field :user, :password, class: "register-input-long"

        %p.register-input-title
          = t('users.edit.confirm_password')
          %font{:color => "red"} *
        = password_field :user, :password_confirmation, class: "register-input-long"
      %br
      = render Buttons::RegularButtonComponent.new(id: 'update-button', value: "Save", type:'submit')
      - unless params[:password].eql?("true")
        .change-password
          %a{:href => edit_user_path(@user.username, password: true)}
            = t('users.edit.change_password')
